import streamlit as st
import pickle
import numpy as np
import pandas as pd
from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier
from sklearn.linear_model import LogisticRegression
from sklearn.preprocessing import StandardScaler
from sklearn.metrics import accuracy_score
from sklearn.model_selection import train_test_split

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∞ (–æ–¥–∏–Ω —Ä–∞–∑ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ)
@st.cache_resource
def load_data_and_model():
    url = "https://raw.githubusercontent.com/jbrownlee/Datasets/master/pima-indians-diabetes.data.csv"
    columns = ['Pregnancies', 'Glucose', 'BloodPressure', 'SkinThickness', 
               'Insulin', 'BMI', 'DiabetesPedigreeFunction', 'Age', 'Outcome']
    data = pd.read_csv(url, names=columns)
    
    cols_to_fix = ['Glucose', 'BloodPressure', 'SkinThickness', 'Insulin', 'BMI']
    data[cols_to_fix] = data[cols_to_fix].replace(0, np.nan)
    data.fillna(data.median(), inplace=True)
    
    X = data.drop('Outcome', axis=1)
    y = data['Outcome']
    scaler = StandardScaler()
    X_scaled = scaler.fit_transform(X)
    
    return X_scaled, y, scaler

X, y, scaler = load_data_and_model()
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# –§—É–Ω–∫—Ü–∏—è –æ–±—É—á–µ–Ω–∏—è —Ç—Ä–µ—Ö –º–æ–¥–µ–ª–µ–π
def train_models(n_estimators, max_depth, min_samples_split):
    rf = RandomForestClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth,
        min_samples_split=min_samples_split,
        random_state=42
    )
    rf.fit(X_train, y_train)
    
    lr = LogisticRegression(max_iter=1000, random_state=42)
    lr.fit(X_train, y_train)
    
    gb = GradientBoostingClassifier(
        n_estimators=n_estimators,
        max_depth=max_depth if max_depth else 3,
        random_state=42
    )
    gb.fit(X_train, y_train)
    
    return rf, lr, gb

# –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å
st.title("üë©‚Äç‚öïÔ∏è –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∏–∞–±–µ—Ç–∞ —Å 3 –º–æ–¥–µ–ª—è–º–∏")

st.sidebar.header("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏")
n_estimators = st.sidebar.slider(
    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–µ—Ä–µ–≤—å–µ–≤", 10, 200, 100, 10,
    help="–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å, –Ω–æ –º–æ–∂–µ—Ç –ø—Ä–∏–≤–µ—Å—Ç–∏ –∫ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—é"
)
max_depth = st.sidebar.selectbox(
    "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞", [None, 5, 10, 15, 20],
    help="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –≥–ª—É–±–∏–Ω—ã –¥–µ—Ä–µ–≤—å–µ–≤"
)
min_samples_split = st.sidebar.slider(
    "–ú–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ —á–∏—Å–ª–æ –æ–±—Ä–∞–∑—Ü–æ–≤ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è", 2, 10, 2,
    help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏–µ"
)

# –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω–∏—è
if st.sidebar.button("–ü–µ—Ä–µ–æ–±—É—á–∏—Ç—å –≤—Å–µ –º–æ–¥–µ–ª–∏"):
    with st.spinner("–û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π..."):
        rf_model, lr_model, gb_model = train_models(n_estimators, max_depth, min_samples_split)
        st.session_state['rf_model'] = rf_model
        st.session_state['lr_model'] = lr_model
        st.session_state['gb_model'] = gb_model
        
        # –û—Ü–µ–Ω–∫–∞ —Ç–æ—á–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö –º–æ–¥–µ–ª–µ–π
        rf_acc = accuracy_score(y_test, rf_model.predict(X_test))
        lr_acc = accuracy_score(y_test, lr_model.predict(X_test))
        gb_acc = accuracy_score(y_test, gb_model.predict(X_test))
        
        st.sidebar.success("–ú–æ–¥–µ–ª–∏ —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–æ–±—É—á–µ–Ω—ã!")
        st.sidebar.metric("Random Forest —Ç–æ—á–Ω–æ—Å—Ç—å", f"{rf_acc:.2%}")
        st.sidebar.metric("Logistic Regression —Ç–æ—á–Ω–æ—Å—Ç—å", f"{lr_acc:.2%}")
        st.sidebar.metric("Gradient Boosting —Ç–æ—á–Ω–æ—Å—Ç—å", f"{gb_acc:.2%}")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ (–µ—Å–ª–∏ –Ω–µ—Ç –≤ —Å–µ—Å—Å–∏–∏)
if 'rf_model' not in st.session_state:
    st.session_state['rf_model'] = RandomForestClassifier(random_state=42).fit(X_train, y_train)
if 'lr_model' not in st.session_state:
    st.session_state['lr_model'] = LogisticRegression(max_iter=1000, random_state=42).fit(X_train, y_train)
if 'gb_model' not in st.session_state:
    st.session_state['gb_model'] = GradientBoostingClassifier(random_state=42).fit(X_train, y_train)

# –í–≤–æ–¥ –¥–∞–Ω–Ω—ã—Ö –ø–∞—Ü–∏–µ–Ω—Ç–∞
st.header("–î–∞–Ω–Ω—ã–µ –ø–∞—Ü–∏–µ–Ω—Ç–∞")
col1, col2 = st.columns(2)
with col1:
    pregnancies = st.slider("–ë–µ—Ä–µ–º–µ–Ω–Ω–æ—Å—Ç–∏", 0, 15, 0)
    glucose = st.slider("–ì–ª—é–∫–æ–∑–∞ (mg/dL)", 50, 300, 90)
    blood_pressure = st.slider("–î–∞–≤–ª–µ–Ω–∏–µ (mmHg)", 40, 160, 70)
    skin_thickness = st.slider("–¢–æ–ª—â–∏–Ω–∞ –∫–æ–∂–∏ (–º–º)", 5, 50, 20)
with col2:
    insulin = st.slider("–ò–Ω—Å—É–ª–∏–Ω (ŒºU/mL)", 2, 300, 16)
    bmi = st.slider("–ò–ú–¢ (kg/m¬≤)", 15.0, 50.0, 25.0, 0.1)
    diabetes_pedigree = st.slider("–ì–µ–Ω–µ—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫", 0.08, 2.5, 0.35, 0.01)
    age = st.slider("–í–æ–∑—Ä–∞—Å—Ç", 21, 90, 27)

# –ö–Ω–æ–ø–∫–∞ —Ä–∞—Å—á—ë—Ç–∞ –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
if st.button("–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å"):
    input_data = np.array([[pregnancies, glucose, blood_pressure, skin_thickness,
                           insulin, bmi, diabetes_pedigree, age]])
    input_scaled = scaler.transform(input_data)
    
    rf_proba = st.session_state['rf_model'].predict_proba(input_scaled)[0][1]
    lr_proba = st.session_state['lr_model'].predict_proba(input_scaled)[0][1]
    gb_proba = st.session_state['gb_model'].predict_proba(input_scaled)[0][1]
    
    st.subheader("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–æ–¥–µ–ª–µ–π (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –¥–∏–∞–±–µ—Ç–∞):")
    st.write(f"Random Forest: {rf_proba*100:.1f}%")
    st.write(f"Logistic Regression: {lr_proba*100:.1f}%")
    st.write(f"Gradient Boosting: {gb_proba*100:.1f}%")
    
    # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –ø–æ —Å–∞–º–æ–π –≤—ã—Å–æ–∫–æ–π –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
    max_proba = max(rf_proba, lr_proba, gb_proba)
    if max_proba > 0.7:
        st.error("–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫! –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å—Ä–æ—á–Ω–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≤—Ä–∞—á–∞.")
    elif max_proba > 0.4:
        st.warning("–£–º–µ—Ä–µ–Ω–Ω—ã–π —Ä–∏—Å–∫. –ñ–µ–ª–∞—Ç–µ–ª—å–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–±—Å–ª–µ–¥–æ–≤–∞–Ω–∏–µ.")
    else:
        st.success("–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫.")
